# Send Azure Reports via Email
# Automatically sends HTML and CSV reports to management team
# Author: Automated Email Script
# Date: 2025-10-30

param(
    [string]$ReportPath = "C:\Scripts\Reports",
    [string[]]$Recipients = @(
        "john.pinto@pyxhealth.com",
        "anthony.schlak@pyxhealth.com",
        "shaun.raj@pyxhealth.com"
    ),
    [string]$From = "azure-reports@pyxhealth.com",
    [string]$SmtpServer = "smtp.office365.com",
    [int]$SmtpPort = 587,
    [string]$ReportType = "Weekly",  # Weekly, Monthly, CostAnalysis, Audit, etc.
    [switch]$SendLatestOnly
)

Write-Host "========================================" -ForegroundColor Cyan
Write-Host "Azure Reports Email Sender" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""

# Email credentials - CONFIGURE THESE
# Option 1: Use app-specific password (recommended for Office 365)
# $password = ConvertTo-SecureString "your-app-specific-password-here" -AsPlainText -Force
# $credential = New-Object System.Management.Automation.PSCredential($From, $password)

# Option 2: Use stored credential (run Set-StoredCredential.ps1 first)
$credentialPath = "$env:USERPROFILE\AzureReportsCredential.xml"
if (Test-Path $credentialPath) {
    $credential = Import-Clixml -Path $credentialPath
    Write-Host "✓ Using stored credentials" -ForegroundColor Green
} else {
    Write-Host "✗ No credentials found. Please configure email credentials." -ForegroundColor Red
    Write-Host ""
    Write-Host "To configure credentials, run this once:" -ForegroundColor Yellow
    Write-Host '$credential = Get-Credential' -ForegroundColor Gray
    Write-Host '$credential | Export-Clixml -Path "$env:USERPROFILE\AzureReportsCredential.xml"' -ForegroundColor Gray
    Write-Host ""
    exit 1
}

# Function to get latest reports
function Get-LatestReports {
    param(
        [string]$Path,
        [string]$Pattern = "*"
    )
    
    if (!(Test-Path $Path)) {
        Write-Host "✗ Report path not found: $Path" -ForegroundColor Red
        return @()
    }
    
    $reports = Get-ChildItem -Path $Path -Filter "*.html" -Recurse | 
        Where-Object { $_.Name -like $Pattern } |
        Sort-Object LastWriteTime -Descending
    
    return $reports
}

# Function to send email with attachments
function Send-ReportEmail {
    param(
        [string[]]$To,
        [string]$Subject,
        [string]$Body,
        [string[]]$Attachments
    )
    
    try {
        $mailParams = @{
            To = $To
            From = $From
            Subject = $Subject
            Body = $Body
            BodyAsHtml = $true
            SmtpServer = $SmtpServer
            Port = $SmtpPort
            UseSsl = $true
            Credential = $credential
        }
        
        if ($Attachments.Count -gt 0) {
            $mailParams.Attachments = $Attachments
        }
        
        Send-MailMessage @mailParams
        
        Write-Host "✓ Email sent successfully to $($To -join ', ')" -ForegroundColor Green
        return $true
    } catch {
        Write-Host "✗ Failed to send email: $_" -ForegroundColor Red
        return $false
    }
}

# Determine report type and get appropriate files
$reportFiles = @()
$emailSubject = ""
$emailBody = ""

switch ($ReportType) {
    "CostAnalysis" {
        $emailSubject = "Azure Cost Analysis Report - $(Get-Date -Format 'yyyy-MM-dd')"
        $reportFiles = Get-LatestReports -Path "$ReportPath\CostAnalysis" -Pattern "*Cost-Analysis*"
        $emailBody = @"
<html>
<body style="font-family: 'Segoe UI', Arial, sans-serif;">
    <h2 style="color: #0078d4;">Azure Cost Analysis Report</h2>
    <p>Attached are the latest cost analysis reports for all Azure subscriptions.</p>
    
    <h3>Report Contents:</h3>
    <ul>
        <li><strong>Total Monthly Costs</strong> - Current spending across all subscriptions</li>
        <li><strong>Resource Breakdown</strong> - Costs by resource type (VMs, Storage, Networking)</li>
        <li><strong>Idle Resources</strong> - Unattached disks, stopped VMs, unused IPs</li>
        <li><strong>Potential Savings</strong> - Estimated monthly savings from optimization</li>
    </ul>
    
    <p>Report generated: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')</p>
    
    <p style="color: #28a745; font-weight: bold;">Review the summary report for key findings and savings opportunities.</p>
    
    <hr>
    <p style="font-size: 11px; color: #666;">
        This is an automated report generated by Azure Cost Analysis scripts.<br>
        For questions, contact your Azure infrastructure team.
    </p>
</body>
</html>
"@
    }
    
    "Audit" {
        $emailSubject = "Azure Security Audit Report - $(Get-Date -Format 'yyyy-MM-dd')"
        $reportFiles = Get-LatestReports -Path "$ReportPath" -Pattern "*Audit*"
        $emailBody = @"
<html>
<body style="font-family: 'Segoe UI', Arial, sans-serif;">
    <h2 style="color: #0078d4;">Azure Security Audit Report</h2>
    <p>Attached are the latest security audit reports for all Azure subscriptions.</p>
    
    <h3>Audit Categories:</h3>
    <ul>
        <li><strong>RBAC Audit</strong> - Role-based access control review</li>
        <li><strong>NSG Audit</strong> - Network security group configuration</li>
        <li><strong>Encryption Audit</strong> - Data encryption compliance</li>
        <li><strong>Backup Audit</strong> - Backup policy compliance</li>
        <li><strong>Identity & AAD</strong> - Azure Active Directory security</li>
        <li><strong>Security Center</strong> - Security posture and recommendations</li>
    </ul>
    
    <p>Report generated: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')</p>
    
    <p style="color: #dc3545; font-weight: bold;">Please review any high-priority findings and remediate as needed.</p>
    
    <hr>
    <p style="font-size: 11px; color: #666;">
        This is an automated report generated by Azure Audit scripts.<br>
        For questions, contact your Azure security team.
    </p>
</body>
</html>
"@
    }
    
    "IdleResources" {
        $emailSubject = "Azure Idle Resources & Cost Savings Report - $(Get-Date -Format 'yyyy-MM-dd')"
        $reportFiles = Get-LatestReports -Path "$ReportPath" -Pattern "*Idle*"
        $emailBody = @"
<html>
<body style="font-family: 'Segoe UI', Arial, sans-serif;">
    <h2 style="color: #0078d4;">Azure Idle Resources Report</h2>
    <p>Attached are the latest idle resource reports showing potential cost savings.</p>
    
    <h3>Idle Resource Types:</h3>
    <ul>
        <li><strong>Stopped VMs</strong> - Deallocated virtual machines still incurring storage costs</li>
        <li><strong>Unattached Disks</strong> - Disks not connected to any VM</li>
        <li><strong>Unused Public IPs</strong> - Public IP addresses not associated with resources</li>
        <li><strong>Unattached NICs</strong> - Network interfaces not connected to VMs</li>
        <li><strong>Empty Resource Groups</strong> - Resource groups with no resources</li>
    </ul>
    
    <p>Report generated: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')</p>
    
    <p style="color: #28a745; font-weight: bold;">Review these resources for potential deletion to reduce costs.</p>
    
    <hr>
    <p style="font-size: 11px; color: #666;">
        This is an automated report generated by Azure Idle Resource scripts.<br>
        Always verify resources are truly unused before deletion.
    </p>
</body>
</html>
"@
    }
    
    "Weekly" {
        $emailSubject = "Azure Weekly Summary Report - Week of $(Get-Date -Format 'MMM dd, yyyy')"
        $reportFiles = Get-LatestReports -Path $ReportPath -Pattern "*"
        $emailBody = @"
<html>
<body style="font-family: 'Segoe UI', Arial, sans-serif;">
    <h2 style="color: #0078d4;">Azure Weekly Summary Report</h2>
    <p>Here's your weekly summary of Azure infrastructure and security.</p>
    
    <h3>This Week's Reports Include:</h3>
    <ul>
        <li>Security audit results</li>
        <li>Cost analysis and optimization opportunities</li>
        <li>Idle resource identification</li>
        <li>Compliance and policy status</li>
    </ul>
    
    <p>Report generated: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')</p>
    
    <h3>Key Actions:</h3>
    <ol>
        <li>Review security findings and remediate high-priority issues</li>
        <li>Evaluate cost optimization recommendations</li>
        <li>Clean up identified idle resources</li>
        <li>Verify compliance with organizational policies</li>
    </ol>
    
    <hr>
    <p style="font-size: 11px; color: #666;">
        This is an automated weekly report from Azure Infrastructure Management.<br>
        For questions or assistance, contact your Azure admin team.
    </p>
</body>
</html>
"@
    }
    
    "Monthly" {
        $emailSubject = "Azure Monthly Executive Report - $(Get-Date -Format 'MMMM yyyy')"
        $reportFiles = Get-LatestReports -Path $ReportPath -Pattern "*"
        $emailBody = @"
<html>
<body style="font-family: 'Segoe UI', Arial, sans-serif;">
    <h2 style="color: #0078d4;">Azure Monthly Executive Report</h2>
    <p>Your comprehensive monthly overview of Azure infrastructure, security, and costs.</p>
    
    <h3>Executive Summary:</h3>
    <ul>
        <li><strong>Infrastructure Health</strong> - Overall system status and performance</li>
        <li><strong>Security Posture</strong> - Compliance and security metrics</li>
        <li><strong>Cost Analysis</strong> - Monthly spending and optimization opportunities</li>
        <li><strong>Resource Utilization</strong> - Usage trends and capacity planning</li>
    </ul>
    
    <p>Reporting Period: $(Get-Date -Format 'MMMM yyyy')</p>
    <p>Report Generated: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')</p>
    
    <h3>Key Metrics:</h3>
    <p><em>Review attached reports for detailed breakdowns and actionable recommendations.</em></p>
    
    <hr>
    <p style="font-size: 11px; color: #666;">
        This is an automated monthly executive report.<br>
        For detailed technical information, refer to the weekly reports or contact the infrastructure team.
    </p>
</body>
</html>
"@
    }
    
    default {
        Write-Host "✗ Unknown report type: $ReportType" -ForegroundColor Red
        exit 1
    }
}

# Filter to latest reports only if requested
if ($SendLatestOnly) {
    Write-Host "Filtering to latest reports only..." -ForegroundColor Yellow
    
    # Group by subscription/type and get the latest of each
    $reportFiles = $reportFiles | 
        Group-Object { ($_.Name -split '-')[0] } | 
        ForEach-Object { $_.Group | Sort-Object LastWriteTime -Descending | Select-Object -First 1 }
}

if ($reportFiles.Count -eq 0) {
    Write-Host "✗ No reports found matching criteria" -ForegroundColor Red
    Write-Host "  Report Type: $ReportType" -ForegroundColor Gray
    Write-Host "  Report Path: $ReportPath" -ForegroundColor Gray
    exit 1
}

Write-Host "Found $($reportFiles.Count) report(s) to send:" -ForegroundColor Green
foreach ($report in $reportFiles) {
    Write-Host "  - $($report.Name) ($('{0:N2}' -f ($report.Length / 1KB)) KB)" -ForegroundColor Gray
}
Write-Host ""

# Prepare attachments (limit to 10 MB total for email)
$attachments = @()
$totalSize = 0
$maxSize = 10MB

foreach ($report in $reportFiles) {
    if (($totalSize + $report.Length) -lt $maxSize) {
        $attachments += $report.FullName
        $totalSize += $report.Length
    } else {
        Write-Host "⚠ Skipping $($report.Name) - would exceed email size limit" -ForegroundColor Yellow
    }
}

Write-Host "Sending email to $($Recipients.Count) recipient(s)..." -ForegroundColor Cyan
Write-Host "  Recipients: $($Recipients -join ', ')" -ForegroundColor Gray
Write-Host "  Attachments: $($attachments.Count) file(s) ($('{0:N2}' -f ($totalSize / 1MB)) MB)" -ForegroundColor Gray
Write-Host ""

# Send the email
$success = Send-ReportEmail -To $Recipients -Subject $emailSubject -Body $emailBody -Attachments $attachments

if ($success) {
    Write-Host ""
    Write-Host "========================================" -ForegroundColor Cyan
    Write-Host "✓ Email sent successfully!" -ForegroundColor Green
    Write-Host "========================================" -ForegroundColor Cyan
    
    # Log the send
    $logPath = "$ReportPath\email-send-log.txt"
    $logEntry = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - Sent $ReportType report to $($Recipients -join ', ') - $($attachments.Count) files"
    Add-Content -Path $logPath -Value $logEntry
    
} else {
    Write-Host ""
    Write-Host "========================================" -ForegroundColor Cyan
    Write-Host "✗ Email send failed" -ForegroundColor Red
    Write-Host "========================================" -ForegroundColor Cyan
    exit 1
}

Write-Host ""
Write-Host "Done!" -ForegroundColor Green
